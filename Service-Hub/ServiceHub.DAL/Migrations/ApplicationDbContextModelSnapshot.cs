// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceHub.DAL.DataBase;

#nullable disable

namespace ServiceHub.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Worker",
                            NormalizedName = "WORKER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessage", (string)null);
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "Alexandria"
                        },
                        new
                        {
                            id = 2,
                            Name = "Cairo"
                        },
                        new
                        {
                            id = 3,
                            Name = "Dakahlia"
                        },
                        new
                        {
                            id = 4,
                            Name = "Giza"
                        },
                        new
                        {
                            id = 5,
                            Name = "Red Sea"
                        },
                        new
                        {
                            id = 6,
                            Name = "Fayoum"
                        },
                        new
                        {
                            id = 7,
                            Name = "Ismailia"
                        },
                        new
                        {
                            id = 8,
                            Name = "Minya"
                        },
                        new
                        {
                            id = 9,
                            Name = "New Valley"
                        },
                        new
                        {
                            id = 10,
                            Name = "Suez"
                        },
                        new
                        {
                            id = 11,
                            Name = "Aswan"
                        },
                        new
                        {
                            id = 12,
                            Name = "Assiut"
                        },
                        new
                        {
                            id = 13,
                            Name = "Beni Suef"
                        },
                        new
                        {
                            id = 14,
                            Name = "Port Said"
                        },
                        new
                        {
                            id = 15,
                            Name = "Luxor"
                        },
                        new
                        {
                            id = 16,
                            Name = "Matrouh"
                        },
                        new
                        {
                            id = 17,
                            Name = "Qena"
                        },
                        new
                        {
                            id = 18,
                            Name = "North Sinai"
                        });
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Montaza District"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "East District"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Name = "Central District"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            Name = "West District"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            Name = "El Amreya District"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 1,
                            Name = "Borg El Arab District"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 2,
                            Name = "Zamelak"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 2,
                            Name = "Zayed"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 2,
                            Name = "Maady"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 2,
                            Name = "Nasr City"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 2,
                            Name = "New Cairo"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 2,
                            Name = "Helwan"
                        },
                        new
                        {
                            Id = 13,
                            CityId = 3,
                            Name = "Mansoura"
                        },
                        new
                        {
                            Id = 14,
                            CityId = 3,
                            Name = "Talkha"
                        },
                        new
                        {
                            Id = 15,
                            CityId = 3,
                            Name = "Mit Ghamr"
                        },
                        new
                        {
                            Id = 16,
                            CityId = 3,
                            Name = "Sinbillawin"
                        },
                        new
                        {
                            Id = 17,
                            CityId = 3,
                            Name = "El-Mahalla El-Kubra"
                        },
                        new
                        {
                            Id = 18,
                            CityId = 3,
                            Name = "Sherbin"
                        },
                        new
                        {
                            Id = 19,
                            CityId = 4,
                            Name = "Al-Haram"
                        },
                        new
                        {
                            Id = 20,
                            CityId = 4,
                            Name = "Al-Ayat"
                        },
                        new
                        {
                            Id = 21,
                            CityId = 4,
                            Name = "Imbaba"
                        },
                        new
                        {
                            Id = 22,
                            CityId = 4,
                            Name = "Al-Omraneyah"
                        },
                        new
                        {
                            Id = 23,
                            CityId = 4,
                            Name = "Al-Warraq"
                        },
                        new
                        {
                            Id = 24,
                            CityId = 4,
                            Name = "Bulaq El Dakrour"
                        },
                        new
                        {
                            Id = 25,
                            CityId = 5,
                            Name = "Hurghada"
                        },
                        new
                        {
                            Id = 26,
                            CityId = 5,
                            Name = "Ras Ghareb"
                        },
                        new
                        {
                            Id = 27,
                            CityId = 5,
                            Name = "Safaga"
                        },
                        new
                        {
                            Id = 28,
                            CityId = 5,
                            Name = "El Qoseir"
                        },
                        new
                        {
                            Id = 29,
                            CityId = 5,
                            Name = "Marsa Alam"
                        },
                        new
                        {
                            Id = 30,
                            CityId = 5,
                            Name = "Shalateen"
                        },
                        new
                        {
                            Id = 31,
                            CityId = 6,
                            Name = "Tamiya"
                        },
                        new
                        {
                            Id = 32,
                            CityId = 6,
                            Name = "Senuris"
                        },
                        new
                        {
                            Id = 33,
                            CityId = 6,
                            Name = "Etsa"
                        },
                        new
                        {
                            Id = 34,
                            CityId = 7,
                            Name = "Fayed"
                        },
                        new
                        {
                            Id = 35,
                            CityId = 7,
                            Name = "Tel El Kebir"
                        },
                        new
                        {
                            Id = 36,
                            CityId = 7,
                            Name = "Abu Suwayr"
                        },
                        new
                        {
                            Id = 37,
                            CityId = 8,
                            Name = "El Idwa"
                        },
                        new
                        {
                            Id = 38,
                            CityId = 8,
                            Name = "Matai"
                        },
                        new
                        {
                            Id = 39,
                            CityId = 8,
                            Name = "Samalut"
                        },
                        new
                        {
                            Id = 40,
                            CityId = 9,
                            Name = "Kharga"
                        },
                        new
                        {
                            Id = 41,
                            CityId = 9,
                            Name = "Dakhla"
                        },
                        new
                        {
                            Id = 42,
                            CityId = 9,
                            Name = "Farafra"
                        },
                        new
                        {
                            Id = 43,
                            CityId = 10,
                            Name = "Ataka"
                        },
                        new
                        {
                            Id = 44,
                            CityId = 10,
                            Name = "Al Arbaeen"
                        },
                        new
                        {
                            Id = 45,
                            CityId = 10,
                            Name = "Al Ganayen"
                        },
                        new
                        {
                            Id = 46,
                            CityId = 11,
                            Name = "Daraw"
                        },
                        new
                        {
                            Id = 47,
                            CityId = 11,
                            Name = "Kom Ombo"
                        },
                        new
                        {
                            Id = 48,
                            CityId = 11,
                            Name = "Edfu"
                        },
                        new
                        {
                            Id = 49,
                            CityId = 12,
                            Name = "Dayrout"
                        },
                        new
                        {
                            Id = 50,
                            CityId = 12,
                            Name = "Manfalut"
                        },
                        new
                        {
                            Id = 51,
                            CityId = 12,
                            Name = "El Ghanayem"
                        },
                        new
                        {
                            Id = 52,
                            CityId = 13,
                            Name = "El Wasta"
                        },
                        new
                        {
                            Id = 53,
                            CityId = 13,
                            Name = "Nasser"
                        },
                        new
                        {
                            Id = 54,
                            CityId = 13,
                            Name = "Biba"
                        },
                        new
                        {
                            Id = 55,
                            CityId = 14,
                            Name = "Al Zohour"
                        },
                        new
                        {
                            Id = 56,
                            CityId = 14,
                            Name = "Al Arab"
                        },
                        new
                        {
                            Id = 57,
                            CityId = 14,
                            Name = "Al Shark"
                        },
                        new
                        {
                            Id = 58,
                            CityId = 15,
                            Name = "Armant"
                        },
                        new
                        {
                            Id = 59,
                            CityId = 15,
                            Name = "Esna"
                        },
                        new
                        {
                            Id = 60,
                            CityId = 15,
                            Name = "Tiba"
                        },
                        new
                        {
                            Id = 61,
                            CityId = 16,
                            Name = "Marsa Matrouh"
                        },
                        new
                        {
                            Id = 62,
                            CityId = 16,
                            Name = "El Alamein"
                        },
                        new
                        {
                            Id = 63,
                            CityId = 16,
                            Name = "Siwa"
                        },
                        new
                        {
                            Id = 64,
                            CityId = 17,
                            Name = "Farshut"
                        },
                        new
                        {
                            Id = 65,
                            CityId = 17,
                            Name = "Dishna"
                        },
                        new
                        {
                            Id = 66,
                            CityId = 17,
                            Name = "Nag Hammadi"
                        },
                        new
                        {
                            Id = 67,
                            CityId = 18,
                            Name = "Arish"
                        },
                        new
                        {
                            Id = 68,
                            CityId = 18,
                            Name = "Rafah"
                        },
                        new
                        {
                            Id = 69,
                            CityId = 18,
                            Name = "Nakhl"
                        });
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Jobs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Carpenter",
                            Price = 400
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electrician",
                            Price = 400
                        },
                        new
                        {
                            Id = 3,
                            Name = "Plumber",
                            Price = 400
                        },
                        new
                        {
                            Id = 4,
                            Name = "Blacksmith",
                            Price = 400
                        },
                        new
                        {
                            Id = 5,
                            Name = "HVAC Technician",
                            Price = 400
                        },
                        new
                        {
                            Id = 6,
                            Name = "Construction Worker",
                            Price = 400
                        },
                        new
                        {
                            Id = 7,
                            Name = "Automotive Mechanic",
                            Price = 400
                        },
                        new
                        {
                            Id = 8,
                            Name = "Maintenance Technician",
                            Price = 500
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tile Installer",
                            Price = 300
                        },
                        new
                        {
                            Id = 10,
                            Name = "Welder",
                            Price = 400
                        },
                        new
                        {
                            Id = 11,
                            Name = "Mason",
                            Price = 500
                        },
                        new
                        {
                            Id = 12,
                            Name = "Tailor",
                            Price = 350
                        },
                        new
                        {
                            Id = 13,
                            Name = "Baker",
                            Price = 450
                        },
                        new
                        {
                            Id = 14,
                            Name = "Butcher",
                            Price = 400
                        },
                        new
                        {
                            Id = 15,
                            Name = "Barber",
                            Price = 150
                        },
                        new
                        {
                            Id = 16,
                            Name = "Furniture Upholsterer",
                            Price = 500
                        },
                        new
                        {
                            Id = 17,
                            Name = "Jewelry Maker",
                            Price = 500
                        },
                        new
                        {
                            Id = 18,
                            Name = "Glass Blower",
                            Price = 500
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ceramic Artist",
                            Price = 500
                        },
                        new
                        {
                            Id = 20,
                            Name = "Leatherworker",
                            Price = 500
                        },
                        new
                        {
                            Id = 21,
                            Name = "Florist",
                            Price = 250
                        },
                        new
                        {
                            Id = 22,
                            Name = "Sign Painter",
                            Price = 300
                        },
                        new
                        {
                            Id = 23,
                            Name = "Tailor/Seamstress",
                            Price = 500
                        },
                        new
                        {
                            Id = 24,
                            Name = "Goldsmith",
                            Price = 500
                        },
                        new
                        {
                            Id = 25,
                            Name = "Potter",
                            Price = 300
                        },
                        new
                        {
                            Id = 26,
                            Name = "Cobbler",
                            Price = 200
                        },
                        new
                        {
                            Id = 27,
                            Name = "Roofer",
                            Price = 350
                        },
                        new
                        {
                            Id = 28,
                            Name = "Window Installer",
                            Price = 400
                        },
                        new
                        {
                            Id = 29,
                            Name = "Life Coach",
                            Price = 500
                        },
                        new
                        {
                            Id = 30,
                            Name = "School Teacher",
                            Price = 400
                        },
                        new
                        {
                            Id = 31,
                            Name = "University Lecturer",
                            Price = 700
                        },
                        new
                        {
                            Id = 32,
                            Name = "Language Instructor",
                            Price = 400
                        },
                        new
                        {
                            Id = 33,
                            Name = "Music Teacher",
                            Price = 250
                        },
                        new
                        {
                            Id = 34,
                            Name = "Art Instructor",
                            Price = 400
                        },
                        new
                        {
                            Id = 35,
                            Name = "Fitness Trainer",
                            Price = 400
                        },
                        new
                        {
                            Id = 36,
                            Name = "Dance Instructor",
                            Price = 400
                        },
                        new
                        {
                            Id = 37,
                            Name = "Driving Instructor",
                            Price = 400
                        },
                        new
                        {
                            Id = 38,
                            Name = "Programming Instructor",
                            Price = 500
                        },
                        new
                        {
                            Id = 39,
                            Name = "Technical Trainer",
                            Price = 500
                        },
                        new
                        {
                            Id = 40,
                            Name = "Corporate Trainer",
                            Price = 700
                        },
                        new
                        {
                            Id = 41,
                            Name = "Martial Arts Instructor",
                            Price = 400
                        },
                        new
                        {
                            Id = 42,
                            Name = "Yoga Instructor",
                            Price = 400
                        },
                        new
                        {
                            Id = 43,
                            Name = "Swimming Coach",
                            Price = 500
                        },
                        new
                        {
                            Id = 44,
                            Name = "Graphic Design Instructor",
                            Price = 500
                        },
                        new
                        {
                            Id = 45,
                            Name = "Culinary Instructor",
                            Price = 500
                        },
                        new
                        {
                            Id = 46,
                            Name = "Photography Instructor",
                            Price = 400
                        },
                        new
                        {
                            Id = 47,
                            Name = "First Aid Instructor",
                            Price = 500
                        },
                        new
                        {
                            Id = 48,
                            Name = "Accounting Instructor",
                            Price = 500
                        });
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.Rate", b =>
                {
                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("FromUserId", "ToUserId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.UserConnection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConnectionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConnections", (string)null);
                });

            modelBuilder.Entity("ServiceHub.DAL.Helper.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("JobId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.ChatMessage", b =>
                {
                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", null)
                        .WithMany("ChatMessages")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.District", b =>
                {
                    b.HasOne("ServiceHub.DAL.Entities.City", "City")
                        .WithMany("Districtlist")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.Notification", b =>
                {
                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", "Owner")
                        .WithMany("Notifications")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.Order", b =>
                {
                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.Rate", b =>
                {
                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", "Rater")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", "Rated")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rated");

                    b.Navigation("Rater");
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.UserConnection", b =>
                {
                    b.HasOne("ServiceHub.DAL.Helper.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceHub.DAL.Helper.ApplicationUser", b =>
                {
                    b.HasOne("ServiceHub.DAL.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ServiceHub.DAL.Entities.Job", "Job")
                        .WithMany("Workers")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("District");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.City", b =>
                {
                    b.Navigation("Districtlist");
                });

            modelBuilder.Entity("ServiceHub.DAL.Entities.Job", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("ServiceHub.DAL.Helper.ApplicationUser", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
